import { ethers } from "ethers";

const rpcUrl = "https://nd-829-997-700.p2pify.com/790712c620e64556719c7c9f19ef56e3" // Arbitrum

// Create a provider
const provider = new ethers.JsonRpcProvider(rpcUrl);
const privateKey = process.env.PRIVATE_KEY0!;
const wallet = new ethers.Wallet(privateKey, provider);

// The raw transaction data
const rawTx = {
    to: "0xF3EEA34C9F33d8BA633C938c2ac17cD4B4F25D50", // Address of the receiver or contract
    value: 200000000000000, // Amount to send (for ETH transfers)
    data: "0x1225d919000000000000000000000000912ce59144191c1204e64559fe8253a0e49e6548000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000010428000000000000000000000000eb608fe026a4f54df43e57a881d2e8395652c58d00000000000000000000000000000000000000000000000000000000000021050000000000000000000000000000000000000000000000000000000000000002000000000000000000000000111111125421ca6dc452d289314280a0f8842a65000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000005e807ed23790000000000000000000000005f515f6c524b18ca30f7783fb58dd4be2e9904ec000000000000000000000000912ce59144191c1204e64559fe8253a0e49e6548000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000005f515f6c524b18ca30f7783fb58dd4be2e9904ec000000000000000000000000f3eea34c9f33d8ba633c938c2ac17cd4b4f25d50000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000000000000000e54200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000048dcdf74d8f5d756d0ce67c981303e2023c086bf6f290dbeada7c956223f65b4b8d6adcbf4fd391f6e3acf1edf0d6218439bca5d577409effa45406144ffe3e2c1400000000000000000000000000000000000000042f0004010003d30003b900a0860a32ec000000000000000000000000000000000000000000000000016345785d8a00000003905120ead050515e10fdb3540ccd6f8236c46790508a76912ce59144191c1204e64559fe8253a0e49e65480064c7cd9748000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001200000000000000000000000005f515f6c524b18ca30f7783fb58dd4be2e9904ec000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067297ee4eb097e072b4ab6f1620268061ae8046400000000000000000000000060cba82ddbf4b5ddcd4398cdd05354c6a790c309000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000014900000000000000000000000000000000000000000000000000008dc8024becf5ff8ba4d1fc3762f6154cc942ccf30049a2a0cec6f6b94770608ebf8b9b7621378cde5bc04b431cc85f515f6c524b18ca30f7783fb58dd4be2e9904ecaf88d065e77c8cc2239327c5edb3a432268e5831912ce59144191c1204e64559fe8253a0e49e6548000000000000000000000000000000000000000000000000000000000000e9f9000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000000000668d40805f515f6c524b18ca30f7783fb58dd4be2e9904ec11a841ba5d9b4fe4b6712081ffeaf04428a490a448e5acd4be3db3c61c5221589da6497b40967f52893d81af9a708bee29a8b7c4624d2543694db1ad0862c9891ae0208eb8bd776b232092f718824eb71c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041b580a241ffef9dad41e7c2e60dc46617c1e81f52eae602f243c4438ab6ee06e37a5325fe1d3a309896f9ab029cfd04bc57d3060f8ec04d31ea60d287ecd548371b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020d6bdbf78af88d065e77c8cc2239327c5edb3a432268e583180a06c4eca27af88d065e77c8cc2239327c5edb3a432268e5831111111125421ca6dc452d289314280a0f8842a650020d6bdbf78af88d065e77c8cc2239327c5edb3a432268e5831111111125421ca6dc452d289314280a0f8842a6500000000000000000000000000000000000000cec83fa6000000000000000000000000000000000000000000000000", // Encoded contract call or empty for plain ETH transfer
    gasLimit: 1000000, // Maximum gas to spend
    gasPrice: 20000000, // Gas price in wei
};

console.log("Using wallet address: " + wallet.address);

async function sendTransaction() {
    try {
        console.log("Sending transaction...");
        const txResponse = await wallet.sendTransaction(rawTx);
        console.log("Transaction sent! Hash:", txResponse.hash);

        // Wait for the transaction to be mined
        const receipt = await txResponse.wait();
        console.log("Transaction confirmed in block:", receipt!.blockNumber);
    } catch (error) {
        console.error("Error sending transaction:", error);
    }
}

sendTransaction();
